package Presentacion.Trip;

import Clases.Bus;
import Clases.Driver;
import Clases.Route;
import Clases.Trip;
import Negocio.BusP;
import Negocio.DriverP;
import Negocio.RouteP;
import com.autobuses.clases.Courtesy;
import com.autobuses.clases.Discount;
import com.autobuses.clases.utils.Funciones; 
import com.autobuses.enumeradores.DialogResult;
import com.autobuses.enumeradores.EstadoBoleto;
import com.autobuses.enumeradores.LugarCompra;
import com.autobuses.enumeradores.Sexo;
import com.autobuses.negocio.CourtesyNegocio;
import com.autobuses.negocio.DiscountNegocio;
import com.autobuses.negocio.TicketNegocio;
import com.autobuses.negocio.TripNegocio;
import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings;
import com.mysql.jdbc.StringUtils;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author lahl_
 */
public class FrmFormulario extends javax.swing.JDialog {
    
    private int idTrip = 0;
    private DialogResult dialogResult = DialogResult.DEFAULT;
    public DialogResult getResult(){
        return this.dialogResult;
    }
    /**
     * Creates new form FrmDetalleBoleto
     */
    public FrmFormulario(int idTrip) throws SQLException, ClassNotFoundException {
        try {
            initComponents();
            this.idTrip = idTrip;
            cargar_conductores();
            cargar_camiones();
            cargar_rutas();
            if (this.idTrip > 0)
                cargarEditar();
        } catch (ParseException ex) {
            Logger.getLogger(FrmFormulario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private DefaultComboBoxModel mdl_conductores = new DefaultComboBoxModel();
    private DefaultComboBoxModel mdl_camiones = new DefaultComboBoxModel();
    private DefaultComboBoxModel mdl_rutas = new DefaultComboBoxModel();
    
    private List<Driver> lst_conductores = new ArrayList();
    private List<Bus> lst_camiones = new ArrayList();
    private List<Route> lst_rutas = new ArrayList();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbl_titulo = new javax.swing.JLabel();
        pnl_formulario = new javax.swing.JPanel();
        lbl_conductor = new javax.swing.JLabel();
        btn_guardar = new javax.swing.JButton();
        cbo_conductores = new javax.swing.JComboBox<>();
        lbl_camion = new javax.swing.JLabel();
        cbo_camiones = new javax.swing.JComboBox<>();
        lbl_ruta = new javax.swing.JLabel();
        cbo_rutas = new javax.swing.JComboBox<>();
        String languageCode = "es";
        // Create the localized date picker and label.
        Locale locale = new Locale(languageCode);
        DatePickerSettings datesettings = new DatePickerSettings(locale);

        datesettings.setFormatForDatesCommonEra("yyyy-MM-dd");
        datesettings.setFormatForDatesBeforeCommonEra("uuuu-MM-dd");

        TimePickerSettings timeSettings = new TimePickerSettings();
        timeSettings.use24HourClockFormat();
        //datesettings.setAllowEmptyDates(false);
        timeSettings.setAllowEmptyTimes(false);
        dt_salida = new com.github.lgooddatepicker.components.DateTimePicker(datesettings, timeSettings);
        lbl_dt_salida = new javax.swing.JLabel();
        String languageCodeRE = "es";
        // Create the localized date picker and label.
        Locale localeRE = new Locale(languageCodeRE);
        DatePickerSettings datesettingsRE = new DatePickerSettings(localeRE);

        datesettingsRE.setFormatForDatesCommonEra("yyyy-MM-dd");
        datesettingsRE.setFormatForDatesBeforeCommonEra("uuuu-MM-dd");

        TimePickerSettings timeSettingsRE = new TimePickerSettings();
        timeSettingsRE.use24HourClockFormat();
        timeSettingsRE.setAllowEmptyTimes(false);
        dt_llegada = new com.github.lgooddatepicker.components.DateTimePicker(datesettingsRE, timeSettingsRE);
        lbl_dt_llegada = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 204));

        lbl_titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_titulo.setText("Viaje");
        lbl_titulo.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lbl_titulo.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_titulo)
                .addContainerGap())
        );

        pnl_formulario.setBackground(new java.awt.Color(255, 255, 255));

        lbl_conductor.setText("Conductor:");
        lbl_conductor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        btn_guardar.setText("Guardar");
        btn_guardar.setBackground(new java.awt.Color(0, 102, 204));
        btn_guardar.setForeground(new java.awt.Color(255, 255, 255));
        btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_guardarActionPerformed(evt);
            }
        });

        cbo_conductores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbl_camion.setText("Cami√≥n:");
        lbl_camion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        cbo_camiones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbl_ruta.setText("Ruta:");
        lbl_ruta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        cbo_rutas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dt_salida.setMinimumSize(new java.awt.Dimension(221, 20));
        dt_salida.setPreferredSize(new java.awt.Dimension(221, 20));

        lbl_dt_salida.setText("Fecha/Hora Salida:");
        lbl_dt_salida.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        lbl_dt_llegada.setText("Fecha/Hora Llegada:");
        lbl_dt_llegada.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout pnl_formularioLayout = new javax.swing.GroupLayout(pnl_formulario);
        pnl_formulario.setLayout(pnl_formularioLayout);
        pnl_formularioLayout.setHorizontalGroup(
            pnl_formularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_formularioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_formularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_guardar)
                    .addGroup(pnl_formularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dt_llegada, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_conductor)
                        .addComponent(cbo_conductores, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_ruta)
                        .addComponent(cbo_rutas, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_camion)
                        .addComponent(cbo_camiones, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_dt_salida)
                        .addComponent(lbl_dt_llegada)
                        .addComponent(dt_salida, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_formularioLayout.setVerticalGroup(
            pnl_formularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_formularioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_conductor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbo_conductores, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_camion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbo_camiones, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_ruta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbo_rutas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(lbl_dt_salida)
                .addGap(9, 9, 9)
                .addComponent(dt_salida, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_dt_llegada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dt_llegada, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btn_guardar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_formulario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_formulario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_guardarActionPerformed
        // TODO add your handling code here:
        int res=JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de modificar este elemento?", "Confirmar Acci√≥n", JOptionPane.YES_NO_OPTION);
        try {
            if(res==0){
                //AGREGAR
                addTrip();
            }
        } catch (SQLException ex) {
            Logger.getLogger(frmTrip.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_guardarActionPerformed
        
    private void cargar_conductores() throws ParseException{
        DriverP dp = new DriverP();
        mdl_conductores.removeAllElements();              
        mdl_conductores.addElement("Seleccionar"); 
        lst_conductores = dp.getAllDrivers();
        if (lst_conductores != null) {
            lst_conductores.forEach((item) -> {
                mdl_conductores.addElement(item.getName()); 
            });
        }
        cbo_conductores.setModel(mdl_conductores);
    }    
    private void cargar_camiones(){
        BusP dp = new BusP();
        mdl_camiones.removeAllElements();              
        mdl_camiones.addElement("Seleccionar"); 
        lst_camiones = dp.getAllBus();
        if (lst_camiones != null) {
            lst_camiones.forEach((item) -> {
                mdl_camiones.addElement(item.getUnidNum() + " - " + item.getEnrollment()); 
            });
        }
        cbo_camiones.setModel(mdl_camiones);
    }    
    private void cargar_rutas(){
        RouteP dp = new RouteP();
        mdl_rutas.removeAllElements();              
        mdl_rutas.addElement("Seleccionar"); 
        lst_rutas = dp.getAllRoutes();
        if (lst_rutas != null) {
            lst_rutas.forEach((item) -> {
                mdl_rutas.addElement(item.getOrigin() + " - " + item.getDestination()); 
            });
        }
        cbo_rutas.setModel(mdl_rutas);
    }
    private void cleanAll(){
        cbo_conductores.setSelectedIndex(0);
        cbo_camiones.setSelectedIndex(0);
        cbo_rutas.setSelectedIndex(0);        
        dt_salida.datePicker.setText("");
        dt_salida.timePicker.setText("");
        dt_llegada.datePicker.setText("");
        dt_llegada.timePicker.setText("");
    }
    private void addTrip() throws SQLException{
        int idx_cbo_conductor = cbo_conductores.getSelectedIndex() - 1;
        int idx_cbo_camion = cbo_camiones.getSelectedIndex() - 1;
        int idx_cbo_ruta = cbo_rutas.getSelectedIndex() - 1;
        String str_dt_salida = dt_salida.getDatePicker().getComponentDateTextField().getText();
        String str_hr_salida = dt_salida.getTimePicker().getTime().toString();
        String str_dt_llegada = dt_llegada.getDatePicker().getComponentDateTextField().getText();
        String str_hr_llegada = dt_llegada.getTimePicker().getTime().toString();
        if (idx_cbo_conductor < 0){
            JOptionPane.showMessageDialog(this, "El campo de conductor es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        } if (idx_cbo_camion < 0){
            JOptionPane.showMessageDialog(this, "El campo de cami√≥n es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        } if (idx_cbo_ruta < 0){
            JOptionPane.showMessageDialog(this, "El campo de ruta es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else if (str_dt_salida.trim().equals("")){
            JOptionPane.showMessageDialog(this, "El campo de fecha de salida es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else if (str_dt_salida == null){
            JOptionPane.showMessageDialog(this, "El campo de hora de salida es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else if (str_dt_llegada.trim().equals("")){
            JOptionPane.showMessageDialog(this, "El campo de fecha de llegada es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        } else if (str_dt_llegada == null){
            JOptionPane.showMessageDialog(this, "El campo de hora de llegada es obligatorio.", "Campos Obligatorios", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        int id_conductor = lst_conductores.get(idx_cbo_conductor).getId();
        int id_camion = lst_camiones.get(idx_cbo_camion).getId();
        int id_ruta = lst_rutas.get(idx_cbo_ruta).getId();
        if (TripNegocio.validarExistencia(id_conductor, id_camion, id_ruta, str_dt_salida, str_hr_salida, str_dt_llegada, str_hr_llegada)) {
            JOptionPane.showMessageDialog(this, "Ya existe un Viaje con la informaci√≥n seleccionada.", "Registro Existente", JOptionPane.INFORMATION_MESSAGE);
        } else {
            TripNegocio.guardarViaje(this.idTrip, id_conductor, id_camion, id_ruta, str_dt_salida, str_hr_salida, str_dt_llegada, str_hr_llegada);                 
            cleanAll();
            this.dialogResult = DialogResult.OK;
            this.dispose();
        }
    }
    private void cargarEditar() throws SQLException{
        try {
            com.autobuses.clases.Trip t = TripNegocio.obtener(this.idTrip);
            int d = 0, b = 0, r = 0;
            for(d = 0; d <= lst_conductores.size(); d++){
                if (lst_conductores.get(d).getId() == t.getDriver().getId()){
                    break;
                }
            }
            for(b = 0; b <= lst_camiones.size(); b++){
                if (lst_camiones.get(b).getId() == t.getBus().getId()){
                    break;
                }
            }
            for(r = 0; r <= lst_rutas.size(); r++){
                if (lst_rutas.get(r).getId() == t.getRoute().getId()){
                    break;
                }
            }
            cbo_camiones.setSelectedIndex(b + 1);
            cbo_conductores.setSelectedIndex(d + 1);
            cbo_rutas.setSelectedIndex(r + 1);
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            DateFormat timeFormat = new SimpleDateFormat("HH:mm");            
            String fechaSalida = dateFormat.format(t.getDateDeparture());
            String fechaLlegada = dateFormat.format(t.getDateArrival());
            dt_salida.datePicker.setText(fechaSalida);
            dt_llegada.datePicker.setText(fechaLlegada);
            dt_salida.timePicker.setText(timeFormat.format(t.getHourDeparture()));
            dt_llegada.timePicker.setText(timeFormat.format(t.getHourArrival()));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmFormulario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_guardar;
    private javax.swing.JComboBox<String> cbo_camiones;
    private javax.swing.JComboBox<String> cbo_conductores;
    private javax.swing.JComboBox<String> cbo_rutas;
    private com.github.lgooddatepicker.components.DateTimePicker dt_llegada;
    private com.github.lgooddatepicker.components.DateTimePicker dt_salida;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl_camion;
    private javax.swing.JLabel lbl_conductor;
    private javax.swing.JLabel lbl_dt_llegada;
    private javax.swing.JLabel lbl_dt_salida;
    private javax.swing.JLabel lbl_ruta;
    private javax.swing.JLabel lbl_titulo;
    private javax.swing.JPanel pnl_formulario;
    // End of variables declaration//GEN-END:variables
}
